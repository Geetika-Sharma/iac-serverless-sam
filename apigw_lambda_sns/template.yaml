AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless patterns - Lambda to SNS

Resources:

# IAM Role for API GW + CWL
  CloudWatchRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Path: /
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'

  ApiCWLRoleArn:
    Type: AWS::ApiGateway::Account
    DependsOn: CloudWatchRole
    Properties: 
      CloudWatchRoleArn: !GetAtt CloudWatchRole.Arn

# API Gateway
  MyApi:
    Type: AWS::Serverless::Api
    DependsOn: ApiCWLRoleArn
    Properties:
      StageName: Prod
      AccessLogSetting:
        DestinationArn: !Sub ${ApiAccessLogGroup.Arn} # This Log Group is already created within our SAM Template
        Format: "{ 'requestId':'$context.requestId', 'ip': '$context.identity.sourceIp', 'caller':'$context.identity.caller', 'user':'$context.identity.user','requestTime':'$context.requestTime', 'xrayTraceId':'$context.xrayTraceId', 'wafResponseCode':'$context.wafResponseCode', 'httpMethod':'$context.httpMethod','resourcePath':'$context.resourcePath', 'status':'$context.status','protocol':'$context.protocol', 'responseLength':'$context.responseLength' }"

  # Define the SNS topic
  MySnsTopic:
    Type: AWS::SNS::Topic

  # Define the publisher Lambda function with permissions
  TopicPublisherFunction:
    Type: AWS::Serverless::Function 
    DependsOn: MySnsTopic
    Properties:
      CodeUri: src/
      Handler: app.lambda_handler
      Runtime: python3.8
      Timeout: 3
      MemorySize: 128
      Environment:
        Variables:
          SNStopic: !Ref MySnsTopic
      Policies:
        ## Read more about SAM Policy templates at:
        ## https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt MySnsTopic.TopicName
      Events:
        MyApi:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /user
            Method: post
            RestApiId: !Ref MyApi
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 60
        MaximumRetryAttempts: 2
        DestinationConfig:
          OnSuccess:
            Type: SNS
            Destination: !Ref MySnsTopic
          OnFailure:
            Type: SNS
            Destination: !Ref MySnsTopic

# CloudWatch Logs - Log Groups
  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: MyApi
    Properties:
      LogGroupName: !Sub /aws/apigateway/${MyApi}
      RetentionInDays: 7

  MySubscription:
    Type: AWS::SNS::Subscription
    DependsOn: MySnsTopic
    Properties:
      Endpoint: # Specify the email ID
      Protocol: email
      TopicArn: !Ref MySnsTopic

Outputs:
  TopicPublisherFunction:
    Description: TopicPublisherFunction function name
    Value: !Ref TopicPublisherFunction
  
  SNStopicName:
    Description: SNS topic name
    Value: !GetAtt MySnsTopic.TopicName

  SNStopicARN:
    Description: SNS topic ARN
    Value: !Ref MySnsTopic
  
  # HelloWorldApi:
  #   Description: "API Gateway endpoint URL for Prod stage for Hello World function"
  #   Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/user"
  # ApiUrl:
  #   Description: "API Gateway endpoint URL for Prod stage"
  #   Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/Prod/"